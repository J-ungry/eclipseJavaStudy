package java_study.co.kr.joongbu.case01;

enum E{ //열거형 보통 얘를 제외하고 말한다 ,인터페이스 추상클래스 클래스 
	
}

@FunctionalInterface //추상메소드 꼭 1개 정의해야한다 !!!!
interface C{ //type C 추상메소드만 정의할 수 있다 
	void print(); // public 을 생략해도 자동으로 된다 
}

abstract class B{
	public abstract void print(); //추상메서드를 정의할 수 있다 
}  //typeB


class A{ //A type 
	
}

public class L03Type {

	public static void main(String[] args) {
		//자바는 아래처럼 저렇게 만드는걸 인정하지 않기 때문에 
		static class InClass extends B{
			@Override
			public void print() {}
		}
		
		A a = new A();
//		B b = new B();
//		C c = new C();
//		인터페이스와 추상클래스는 추상메소드가 있기 때문에 객체로 생성할 수 없다.
		B b = new B() { //생성과 동시에 구현하면 객체로 생성할 수 있다 , 인터페이스도 마찬가지 
			@Override
			public void print() {
				
			}
		};
		
		C c = new C() {
			@Override
			public void print(){}
		};
		
		C c2 = () -> {}; //interface 에 추상 메서드가 하나 이쓰면 줄여서 쓸 수 있다 !(람다식) 함수형 언어 방식이라고 부른다 
		
		B b2 = new InClass();
	}

}
