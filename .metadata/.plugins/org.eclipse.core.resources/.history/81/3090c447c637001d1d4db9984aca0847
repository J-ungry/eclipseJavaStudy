package java_study.co.kr.joongbu.case01;

import java.util.ArrayList;
import java.util.List;

public class L16StreamAPIEx2 {

	//쇼핑몰에서 판매하는 상품 자료 type = Variable Object(VO), Data Transfer Object(DTO) 데이터전송할때 임시 저장되는 페이지로 쓰인다 
	//key:value 로 되어있는 가장 인기있는 자료구조 : JavaScriptObjectNotatioin :원랜 데이터 객체 명세서로 만들어진 것이다 ! =>리터럴 표기법 ->문자열 통신으로 사용  
	//{"Products":[{"name":"desk","price":60000,"category":4,"quantity":55}]}
//	enum Cate{ //카테고리의 열거형  => 각 필드가 고유한 값을 갖는 상수 따라서 수를 사용하는 다른 상수와 섞어 쓰지 않는다 (고유값을 갖기 때문에 자바 내부에서만 슬 수 있다) 
//		식품,의류,가구,문구류,침구류 
//	}
	
	interface Cate{ //카체고리로 int 와 string 모두 쓰고싶을 때 번호도 필요하고 이름도 필요할떄 , db 에 저장하는 분류가 보통 수로 되어있기 때문에 열거형이 아니라 숫자로 된 상수를 사용한다 . (통신을 할때) 
		public static int 식품 = 0;
		public static int 의류 = 1;
		public static int 가구 = 2;
		public static int 문구 = 3;
		public static int 침구 = 4;
	}
	class ProductDTO{
		//class의 전역에  선언된 변수 : 전역변수 , 객체의 필드로 생성됨( 속성) 
		String name;
		int price =0;
		int category; //0:식품 , 1: 의류 2:가구 3: 문구류 4: 침구류 (약속)
		int quantity = 10; // 기본으로 10개를 준다 
		
		//생성자로 필드 초기화 : 생성자의 return 이 없는 이유 ???-> 생성자는 new연산자로 호출하면 객체를 반환하는 함수다. 이름이 반환하는 타입인 함수다 그래서 이름 자체가 반환하는 타입이 된다 
		public ProductDTO(String name,int price, int category) {
			//필드 접근자 ! this
			this.name = name;
			this.price = price; 
			this.category = category;

		}
		//생성자는 같지만 매개변수가 다른 애들은 오버로드라고 한다 
		public ProductDTO(String name,int price, int category, int quantity) {
			//필드 접근자 ! this
			this.name = name;
			this.price = price; 
			this.category = category;
			this.quantity = quantity;
		}
		
		@Override
	      public String toString() {
	         return "ProductDTO {name:" + name + ", price:" + price + ", category:" + category + ", quantity:" + quantity
	               + "}\n";
	      }
		
		public int sum(int a,int b) {return a+b;} //함수는 반환하는  data 의 type 을 명시한다 .
	}
	public static void main(String[] args) {
		
		L16StreamAPIEx2 ex2=new L16StreamAPIEx2();
		List<ProductDTO> products=new ArrayList<ProductDTO>();
		
		products.add(ex2.new ProductDTO("허쉬 초콜릿", 1000, Cate.식품));
		products.add(ex2.new ProductDTO("허쉬 초콜릿 우유", 1200, Cate.식품, 5));
		products.add(ex2.new ProductDTO("바나나 단지 우유", 1500, Cate.식품, 3));
		products.add(ex2.new ProductDTO("돼지바", 900, Cate.식품, 15));
		products.add(ex2.new ProductDTO("하겐다즈 바닐라", 5000, Cate.식품,11));
		products.add(ex2.new ProductDTO("소세지 도시락", 3500, Cate.식품,3));
		products.add(ex2.new ProductDTO("도시락 컵라면", 800, Cate.식품,50));
		
		products.add(ex2.new ProductDTO("hp 연필", 500, Cate.문구,200));
		products.add(ex2.new ProductDTO("지우개", 500, Cate.문구,50));
		products.add(ex2.new ProductDTO("볼펜", 1000, Cate.문구,100));
		products.add(ex2.new ProductDTO("화이트 지우개", 2500, Cate.문구,3));
		
		products.add(ex2.new ProductDTO("흰색 셔츠", 10000, Cate.의류,0));
		products.add(ex2.new ProductDTO("나이키 반팔 티", 25000, Cate.의류,5));
		products.add(ex2.new ProductDTO("나이키 신발", 110000, Cate.의류,2));
		products.add(ex2.new ProductDTO("아디다스 신발", 95000, Cate.의류,2));
		
		products.add(ex2.new ProductDTO("여름용 이불", 25000, Cate.침구,1));
		products.add(ex2.new ProductDTO("솜 베게", 2000, Cate.침구,10));
		products.add(ex2.new ProductDTO("대나무 베게", 2000, Cate.침구,0));
		products.add(ex2.new ProductDTO("침대 커버 퀸", 15000, Cate.침구,3));
		
		products.add(ex2.new ProductDTO("행거", 60000, Cate.가구,1));
		products.add(ex2.new ProductDTO("책상", 45000, Cate.가구,1));
		products.add(ex2.new ProductDTO("듀오백의자", 145000, Cate.가구,3));
		
		System.out.println(products.toString());
		//편의점 관리 프로그램 
		//편의점 상품 저장 
		//편의점 상품 분류, 상품의 수가 없는것을 확인, 분류별 상품 가격 평균 => 관ㄹㅣ(자료를다루는 방법) 
		
		//식품 중 가격이 2000원 이상인 것을 검색하고 싶다 

		List<ProductDTO> foods = new ArrayList<ProductDTO>();
		for(ProductDTO p : products) {
			if(p.category==Cate.식품 && p.price >=2000) {
				foods.add(p);
			}
		} //외부 반복문 검사식 ( 함수형 언어가 지원하는 내부 반복문 보다 복잡도가 높다)  
//		System.out.println(foods);
		
		products.stream()  // list 를 stream 자료구조로 바꾸겠다 !! stream 은 자료구조 일부임 
		.filter((p)->p.category==Cate.식품) //filter 는 중간 연산자 ! Stream 을 다시 반환하기 때문이다. true 인거만 반환하는거임 -> 이어서 중간 연산가능 
		.filter((p)->p.price >= 2000)
		.forEach((p)->System.out.print(p));	
	}

}
